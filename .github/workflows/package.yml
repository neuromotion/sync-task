name: package

on:
  workflow_dispatch:
    inputs:
      setting:
        description: Build for 'home' or 'clinic'
        required: true
        default: 'home'
      os:
        description: Which OS to target - 'win', 'mac', 'linux', 'all'
        required: true
        default: 'win'
      task:
        description: Which task to build - 'programming', 'interview', 'tsst', 'erp', 'adaptive', 'amplitude', 'ramping', 'all'
        required: true
        default: 'programming'

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ${{
          (github.event.inputs.os == 'all' && fromJSON('["ubuntu-latest", "macOS-latest", "windows-latest"]')) ||
           (github.event.inputs.os == 'win' && fromJSON('["windows-latest"]')) ||
           (github.event.inputs.os == 'mac' && fromJSON('["macOS-latest"]')) ||
           (github.event.inputs.os == 'linux' && fromJSON('["ubuntu-latest"]')) }}
        task: ${{
          (github.event.inputs.task == 'all' && fromJSON('["programming", "interview", "tsst","erp","adaptive","amplitude","ramping"]')) ||
           (github.event.inputs.task == 'programming' && fromJSON('["programming"]')) ||
           (github.event.inputs.task == 'interview' && fromJSON('["interview"]')) ||
           (github.event.inputs.task == 'tsst' && fromJSON('["tsst"]')) ||
           (github.event.inputs.task == 'erp' && fromJSON('["erp"]')) ||
           (github.event.inputs.task == 'adaptive' && fromJSON('["adaptive"]')) ||
           (github.event.inputs.task == 'amplitude' && fromJSON('["amplitude"]')) ||
           (github.event.inputs.task == 'ramping' && fromJSON('["ramping"]')) }}

    steps:
    # Set up js package
      - uses: actions/checkout@v1
      - id: task-string
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ matrix.task }}
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Fix up git URLs
        run: echo -e '[url "https://github.com/"]\n  insteadOf = "git://github.com/"' >> ~/.gitconfig
      - name: Set package version and name
        uses: brown-ccv/gh-actions/get-package-info@main
        id: package_info

      # install, test, build package
      - name: npm install
        run: |
          npm config set "//npm.pkg.github.com/:_authToken" ${{ secrets.GITHUB_TOKEN }}
          npm install
      - name: Load .env file
        uses: xom9ikk/dotenv@v1.0.2
        with:
          path: ./env
          mode: ${{github.event.inputs.setting}}
      - name: Load .env file for task
        uses: xom9ikk/dotenv@v1.0.2
        with:
          path: ./env
          mode: ${{matrix.task}}
      - name: npm build
        run: npm run build
      - name: npm test
        run: npm test
        env:
          CI: true

      # Build electron app package installers
      - name: package electron - windows
        if: startsWith(matrix.os, 'windows')
        run: npm run package:windows:${{ matrix.task }}
      - name: package electron - linux
        if: startsWith(matrix.os, 'ubuntu')
        run: npm run package:linux:${{ matrix.task }}
      - name: package electron - mac
        if: startsWith(matrix.os, 'mac')
        run: npm run package:mac:${{ matrix.task }}
      - name: npm rebuild - mac
        if: startsWith(matrix.os, 'mac')
        run: npm rebuild
      - name: Mac installer
        if: startsWith(matrix.os, 'mac')
        run: npm run installer:mac:${{ matrix.task }}

      # # Upload installers to github action
      - name: upload win-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'windows')
        with:
          name: ${{ format('win-installer-{0}', github.event.inputs.setting) }}
          path: dist/installers/${{ matrix.task }}-${{ steps.package_info.outputs.package_version }}-setup.exe
      - name: upload mac-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'mac')
        with:
          name: ${{ format('mac-installer-{0}', github.event.inputs.setting) }}
          path: dist/installers/${{ matrix.task }}-${{ steps.package_info.outputs.package_version }}.dmg
      - name: upload linux-installer
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: ${{ format('linux-installer-{0}', github.event.inputs.setting) }}
          path: dist/installers/${{ steps.task-string.outputs.lowercase }}_${{ steps.package_info.outputs.package_version }}_x64.deb

      # Build PsiTurk - linux only
      # - name: Set up Python 3.7
      #   if: startsWith(matrix.os, 'ubuntu')
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: 3.7
      # - name: Install PsiTurk
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: pip install psiturk
      # - name: Create Psiturk Build
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     cd psiturkit
      #     ./psiturk-it -p ${{ matrix.task }}-psiturk
      # - name: Upload PsiTurk Build
      #   uses: actions/upload-artifact@master
      #   if: startsWith(matrix.os, 'ubuntu')
      #   with:
      #     name: psiturk-build
      #     path: psiturkit/${{ matrix.task }}-psiturk
