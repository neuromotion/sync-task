{"version":3,"sources":["lib/markup/stimuli.js","lib/markup/photodiode.js","lib/utils.js","config/trigger.js","trials/camera.js","config/main.js","assets/images sync nonrecursive //.(png|jpe?g|svg)$","assets/images/blue_payout_correct_10.png","assets/images/blue_payout_correct_100.png","components/Login.jsx","trials/experimentEnd.js","trials/sendCode.js","trials/taskBlock.js","trials/experimentStart.js","trials/startCode.js","lib/markup/eventMarkerMessage.js","trials/holdUpMarker.js","trials/adjustVolume.js","timelines/preamble.js","timelines/main.js","components/JsPsychExperiment.jsx","firebase.js","App.jsx","index.js"],"names":["__webpack_require__","d","__webpack_exports__","baseStimulus","element","prompt","arguments","length","undefined","centered","concat","photodiodeGhostBox","pdSpotEncode","_config_main__WEBPACK_IMPORTED_MODULE_0__","_config_trigger__WEBPACK_IMPORTED_MODULE_1__","jquery__WEBPACK_IMPORTED_MODULE_2__","jquery__WEBPACK_IMPORTED_MODULE_2___default","n","ipcRenderer","config","USE_ELECTRON","electron","window","require","class_","USE_PHOTODIODE","taskCode","numBlinks","eventCodes","open_task","repeat_pulse_for","ms","i","callback","$","css","background-color","setTimeout","pulse_for","send","sleep","getProlificId","getTurkUniqueId","beep","r","jspsych_react__WEBPACK_IMPORTED_MODULE_0__","Promise","resolve","keys","map","turkInfo","jsPsych","turk","workerId","assignmentId","variable","vars","location","search","substring","split","pair","decodeURIComponent","getQueryVariable","audioCodes","context","AudioContext","o","createOscillator","g","createGain","type","connect","frequency","setValueAtTime","console","log","currentTime","destination","start","stop","module","exports","process","camera","document","title","taskName","markup","lang","instructions","stimulus","choices","continue","button","response_ends_trial","on_load","participantId","data","get","values","participant_id","getElementById","handleEvents","stream","recorder","srcObject","recordedChunks","MediaRecorder","mimeType","addEventListener","e","size","push","blob","media","reader","FileReader","fileName","Date","now","onload","readyState","buffer","Buffer","result","JSON","stringify","readAsArrayBuffer","saveBlob","Blob","navigator","mediaDevices","getUserMedia","video","then","desktopCapturer","getSources","types","_ref","Object","_home_runner_work_sync_task_sync_task_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_runner_work_sync_task_sync_task_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","sources","_iterator","_step","source","wrap","_context","prev","next","_home_runner_work_sync_task_sync_task_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__","s","done","value","name","mandatory","chromeMediaSource","chromeMediaSourceId","id","catch","error","err","f","_x","apply","this","on_finish","USE_CAMERA","cameraCapture","screenCapture","lodash__WEBPACK_IMPORTED_MODULE_1__","lodash__WEBPACK_IMPORTED_MODULE_1___default","_trigger__WEBPACK_IMPORTED_MODULE_2__","_brown_ccv_behavioral_task_trials__WEBPACK_IMPORTED_MODULE_3__","_lib_utils__WEBPACK_IMPORTED_MODULE_4__","USE_MTURK","outsideTurk","USE_PROLIFIC","USE_FIREBASE","REACT_APP_FIREBASE","AT_HOME","REACT_APP_AT_HOME","_unused","USE_VOLUME","REACT_APP_VOLUME","REACT_APP_VIDEO","USE_EEG","REACT_APP_USE_EEG","REACT_APP_USE_PHOTODIODE","mlang","_","merge","init","./blue_payout_correct_10.png","./blue_payout_correct_100.png","webpackContext","req","webpackContextResolve","Error","code","p","Login","onLogin","envParticipantId","envStudyId","validationFunction","_useState","useState","_useState2","slicedToArray","setParticipant","_useState3","_useState4","studyId","setStudy","_useState5","_useState6","setError","useEffect","react_default","createElement","className","role","Form","onSubmit","preventDefault","loggedIn","Group","controlId","Label","Control","autoFocus","onChange","target","Button","style","width","block","disabled","experimentEnd","duration","task","end","trial_duration","sendCode","time","sound","heading","experimentStart","startCode","setting_up","eventMarkerMessage","asyncToGenerator","regenerator_default","abrupt","eventMarker","found","holdUpMarker","innerHTML","adjustVolume","adjust_volume","tl","timeline","JsPsychExperiment","dataUpdateFunction","dataFinishFunction","experiment","settings","on_data_update","apiKey","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","databaseURL","REACT_APP_databaseURL","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","db","firebase","initializeApp","firestore","hostname","useEmulator","initParticipant","startDate","collection","doc","set","start_time","app_version","appVersion","app_platform","platform","results","addToFirebase","study_id","start_date","update","FieldValue","arrayUnion","App","toISOString","setLogin","setRenderer","psiturk","setPsiturk","_useState7","_useState8","setEnvParticipantId","_useState9","_useState10","setEnvStudyId","_useState11","_useState12","currentMethod","setMethod","_useState13","_useState14","reject","setReject","query","URLSearchParams","defaultValidation","defaultFunction","setLoggedIn","useCallback","addProperties","credentials","sendSync","lodash","noConflict","turkId","PsiTurk","pID","Fragment","components_JsPsychExperiment","desktop","mturk","recordTrialData","default","_ref2","_callee2","_context2","saveData","completeHIT","completePsiturk","components_Login","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.59a2d52b.chunk.js","sourcesContent":["const baseStimulus = (element, prompt = false, centered = false) => {\n  const class_ = centered\n    ? \"center_container\"\n    : prompt\n    ? \"main-prompt\"\n    : \"main\";\n  return `<div class=${class_}>${element}</div>`;\n};\n\nexport { baseStimulus };\n","import { config } from \"../../config/main\";\nimport { eventCodes } from \"../../config/trigger\";\nimport $ from \"jquery\";\n\n// conditionally load electron and psiturk based on MTURK config variable\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require(\"electron\");\n  ipcRenderer = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n  const class_ = config.USE_PHOTODIODE ? \"visible\" : \"invisible\";\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`;\n  return markup;\n};\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n    $(\".photodiode-spot\").css({ \"background-color\": \"black\" });\n    setTimeout(() => {\n      $(\".photodiode-spot\").css({ \"background-color\": \"white\" });\n      callback();\n    }, ms);\n  }\n\n  function repeat_pulse_for(ms, i) {\n    if (i > 0) {\n      pulse_for(ms, () => {\n        setTimeout(() => {\n          repeat_pulse_for(ms, i - 1);\n        }, ms);\n      });\n    }\n  }\n\n  if (config.USE_PHOTODIODE) {\n    const blinkTime = 40;\n    let numBlinks = taskCode;\n    if (taskCode < eventCodes.open_task) numBlinks = 1;\n    repeat_pulse_for(blinkTime, numBlinks);\n    if (ipcRenderer) ipcRenderer.send(\"trigger\", taskCode);\n  }\n};\n\nexport { photodiodeGhostBox, pdSpotEncode };\n","import { jsPsych } from 'jspsych-react'\nimport requireContext from 'require-context.macro'\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\n// import images\nconst importAll = (r) => {\n  return r.keys().map(r);\n}\n\nconst images = importAll(requireContext('../assets/images', false, /\\.(png|jpe?g|svg)$/));\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getQueryVariable = (variable) => {\n  let query = window.location.search.substring(1);\n  let vars = query.split(\"&\");\n  for (let i = 0; i < vars.length; i++) {\n    let pair = vars[i].split(\"=\");\n    if (decodeURIComponent(pair[0]) === variable) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n};\n\nconst getProlificId = () => {\n  const prolificId = getQueryVariable(\"PROLIFIC_PID\");\n  return prolificId\n};\n\nconst beep = (audioCodes) => {\n  const context = new AudioContext()\n  const o = context.createOscillator()\n  const g = context.createGain()\n  o.type = audioCodes.type\n  o.connect(g)\n  o.frequency.setValueAtTime(audioCodes.frequency, 0)\n  console.log(context.currentTime)\n  g.connect(context.destination)\n  o.start()\n  o.stop(context.currentTime + 0.4)\n}\n\nconst getUserId = (data) => {\n  const patientId = JSON.parse(data.responses)['Q0']\n  jsPsych.data.addProperties({patient_id: patientId, timestamp: Date.now()})\n  console.log(\"ID\", patientId)\n}\n\n\nexport {\n  sleep,\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  images,\n  startKeypressListener,\n  getProlificId,\n  getTurkUniqueId,\n  beep,\n  getUserId\n}\n","// NOTE - these event codes must match what is in public/config/trigger.js\nconst eventCodes = {\n\tstart: 1,\n\tstop: 2,\n\topen_task: process.env.REACT_APP_EVENT_CODE\n}\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n\teventCodes\n}\n","import { lang, taskName, config} from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { jsPsych } from 'jspsych-react'\n\n\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\nfunction saveBlob(blob, media, participantId) {\n  let reader = new FileReader()\n  let fileName =`pid_${participantId}_${media}_${Date.now()}.webm`\n  reader.onload = function() {\n      if (reader.readyState === 2) {\n          var buffer = new Buffer(reader.result)\n          ipcRenderer.send('save_video', fileName, buffer)\n          console.log(`Saving ${JSON.stringify({ fileName, size: blob.size })}`)\n      }\n  }\n  reader.readAsArrayBuffer(blob)\n}\n\nconst camera = () => {\n  document.title = taskName\n  let markup = `\n  <div class=\"d-flex flex-column align-items-center\">\n  <p>${lang.instructions.camera}</p>\n  <video id=\"camera\" width=\"640\" height=\"480\" autoplay></video>\n  </div>\n  `\n  let stimulus = baseStimulus(markup, true) +\n                 photodiodeGhostBox()\n\n  return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [ lang.prompt.continue.button],\n    response_ends_trial: true,\n    on_load: () => {\n      // Grab elements, create settings, etc.\n      // Elements for taking the snapshot\n      const participantId = jsPsych.data.get().values()[0].participant_id\n\n      let camera = document.getElementById('camera');\n\n\n      const handleEvents = function(stream, recorder) {\n        console.log(stream)\n        if (recorder === \"cameraCapture\") {\n          camera.srcObject = stream;\n        }\n\n\n        const options = {mimeType: 'video/webm'};\n        const recordedChunks = [];\n        window[recorder] = new MediaRecorder(stream, options);\n\n        window[recorder].addEventListener('dataavailable', function(e) {\n          if (e.data.size > 0) {\n            recordedChunks.push(e.data);\n          }\n        });\n\n        window[recorder].addEventListener('stop', function() {\n          const blob = new Blob(recordedChunks)\n          saveBlob(blob, recorder, participantId)\n        });\n\n      };\n\n      navigator.mediaDevices.getUserMedia({ video: true })\n          .then((stream) => handleEvents(stream, 'cameraCapture'));\n\n      const { desktopCapturer } = window.require('electron')\n\n      desktopCapturer.getSources({ types: ['window'] }).then(async sources => {\n        for (const source of sources) {\n          if (source.name === taskName) {\n            navigator.mediaDevices.getUserMedia({\n              video: {\n                mandatory: {\n                  chromeMediaSource: 'desktop',\n                  chromeMediaSourceId: source.id\n                }\n              }\n            }).then(stream => {\n              handleEvents(stream, 'screenCapture')\n            })\n            .catch(error => console.log(error))\n          }\n        }\n      })\n\n    },\n    on_finish: () => {\n      if (config.USE_CAMERA) {\n        window.cameraCapture.start()\n        window.screenCapture.start()\n      }\n    }\n  }\n}\n\nexport default camera\n","// config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settins can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from \"jspsych-react\";\nimport _ from \"lodash\";\nimport { eventCodes } from \"./trigger\";\nimport { init } from \"@brown-ccv/behavioral-task-trials\";\nimport { getProlificId } from \"../lib/utils\";\n\n// mapping of letters to key codes\nconst keys = {\n  A: 65,\n  B: 66,\n  C: 67,\n  F: 70,\n  J: 74,\n  space: 32,\n};\n\n// audio codes\nconst audioCodes = {\n  frequency: 100 * (eventCodes.open_task - 9),\n  type: \"sine\",\n};\n\nconst taskName = process.env.REACT_APP_TASK_NAME;\n\n// is this mechanical turk?\nlet USE_MTURK = !jsPsych.turk.turkInfo().outsideTurk;\nlet USE_PROLIFIC = getProlificId() && !USE_MTURK;\nlet USE_ELECTRON = true;\nlet USE_FIREBASE = process.env.REACT_APP_FIREBASE === \"true\";\nconst AT_HOME = (process.env.REACT_APP_AT_HOME === 'true')\n\ntry {\n  window.require(\"electron\");\n} catch {\n  USE_ELECTRON = false;\n}\n\n\n// whether or not to ask the participant to adjust the volume\nconst USE_VOLUME = process.env.REACT_APP_VOLUME === \"true\";\n// these variables depend on USE_ELECTRON\n// whether or not to enable video\nconst USE_CAMERA = process.env.REACT_APP_VIDEO === \"true\" && USE_ELECTRON;\n// whether or not the EEG/event marker is available\nconst USE_EEG =\n  process.env.REACT_APP_USE_EEG === \"true\" && USE_ELECTRON;\n// whether or not the photodiode is in use\nconst USE_PHOTODIODE =\n  process.env.REACT_APP_USE_PHOTODIODE === \"true\" && USE_ELECTRON;\n\n// get language file\nconst lang = require(\"../language/en_us.json\");\nif (!USE_ELECTRON) {\n  // if this is mturk, merge in the mturk specific language\n  const mlang = require(\"../language/en_us.mturk.json\");\n  _.merge(lang, mlang);\n}\n\nconst defaultBlockSettings = {\n  conditions: [\"a\", \"b\", \"c\"],\n  repeats_per_condition: 1, // number of times every condition is repeated\n  is_practice: false,\n  is_tutorial: false,\n  photodiode_active: false,\n};\n\n// setting config for trials\nconst config = init({\n  USE_PHOTODIODE,\n  USE_EEG,\n  USE_ELECTRON,\n  USE_MTURK,\n  USE_VOLUME,\n  USE_CAMERA,\n  USE_PROLIFIC,\n  USE_FIREBASE,\n  AT_HOME\n});\n\nexport {\n  taskName,\n  keys,\n  defaultBlockSettings,\n  lang,\n  eventCodes,\n  config,\n  audioCodes,\n  AT_HOME\n};\n","var map = {\n\t\"./blue_payout_correct_10.png\": 70,\n\t\"./blue_payout_correct_100.png\": 71\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 69;","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_10.f515a81e.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_100.ae2416c7.png\";","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction Login({ onLogin, envParticipantId, envStudyId, validationFunction }) {\n  // State variables for login screen\n  const [participantId, setParticipant] = useState(\"\");\n  const [studyId, setStudy] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // Update based on environment variables\n    setParticipant(envParticipantId);\n    setStudy(envStudyId);\n  }, [envParticipantId, envStudyId]);\n\n  // Checks if forms are filled in\n  function validateForm() {\n    return participantId.length > 0 && studyId.length > 0;\n  }\n\n  // Function to log in participant\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Validates fields\n    validationFunction(participantId, studyId)\n    // Logs in depending on result from promise\n    .then((loggedIn) => {\n      if (loggedIn) {\n        onLogin(loggedIn, studyId, participantId);\n      } else {\n        setError(true);\n      }\n    });\n  }\n\n  return (\n    <div className=\"centered-h-v\">\n      <div className=\"width-50\">\n        {error ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            The participant ID and study ID do not match\n          </div>\n        ) : null}\n        <Form className=\"centered-h-v\" onSubmit={handleSubmit}>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"participantId\">\n            <Form.Label>Participant ID</Form.Label>\n            <Form.Control\n              autoFocus\n              type=\"participantId\"\n              value={participantId}\n              onChange={(e) => setParticipant(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"studyId\">\n            <Form.Label>Study ID</Form.Label>\n            <Form.Control\n              type=\"studyId\"\n              value={studyId}\n              onChange={(e) => setStudy(e.target.value)}\n            />\n          </Form.Group>\n          <Button\n            style={{ width: \"100%\" }}\n            block\n            size=\"lg\"\n            type=\"submit\"\n            disabled={!validateForm()}\n          >\n            Log In\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst experimentEnd = (duration) => {\n  let stimulus = baseStimulus(`<h1>${lang.task.end}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: duration\n  }\n}\n\nexport default experimentEnd\n","import { eventCodes, lang, audioCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { beep } from '../lib/utils'\n\nconst sendCode = (block, time, sound=false) => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.heading[block]}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: time,\n    on_load: () => {\n      pdSpotEncode(eventCodes[block])\n      console.log(eventCodes[block])\n      if (sound === true) {\n        beep(audioCodes)\n      }\n    }\n  }\n}\n\nexport default sendCode\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst prompt = (block) => {\n  let stimulus = baseStimulus(`<div><h2>${lang.instructions[block]}</h2></div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [lang.prompt[block]]\n  }\n}\n\n  \n  export default prompt\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconsole.log(process.env)\nlet TASK_NAME = process.env.REACT_APP_TASK_NAME\nconst experimentStart = () => {\n  let stimulus = baseStimulus(`<h1>${TASK_NAME}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [lang.prompt.continue]\n  }\n}\n\nexport default experimentStart\n","import { eventCodes, lang, audioCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { beep } from '../lib/utils'\n\nconst startCode = () => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.setting_up}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: 2000,\n    on_load: () => {\n      pdSpotEncode(eventCodes.open_task)\n      beep(audioCodes)\n    }\n\n  }\n}\n\nexport default startCode\n","import { lang } from '../../config/main'\n\nconst eventMarkerMessage = async () => {\n\t\treturn `<span style=\"color: green;\">${lang.eventMarker.found}</span>`\n}\n\nexport default eventMarkerMessage\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport eventMarkerMessage from '../lib/markup/eventMarkerMessage'\n\nconst holdUpMarker = () => {\n  let stimulus = baseStimulus(`<div>\n    <h2 id='usb-alert'></h2></div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [lang.prompt.continue],\n    on_load: () => (eventMarkerMessage()\n                      .then(s => document.getElementById('usb-alert')\n                      .innerHTML = s )\n                    )\n  }\n}\n\nexport default holdUpMarker\n","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst adjustVolume = () => {\n    const stimulus = baseStimulus(`\n    <div class='instructions'>\n    <h1>${lang.instructions.adjust_volume}</h1>\n    </div>\n    `, true)\n\n    return {\n      type: 'html_button_response',\n      stimulus: stimulus,\n      choices: [lang.prompt.continue],\n        response_ends_trial: true\n    }\n}\n\nexport default adjustVolume\n","import experimentStart from \"../trials/experimentStart\";\nimport startCode from \"../trials/startCode\";\nimport holdUpMarker from \"../trials/holdUpMarker\";\nimport { config } from \"../config/main\";\nimport adjustVolume from \"../trials/adjustVolume\";\nimport camera from \"../trials/camera\";\n\n\nlet tl = [experimentStart()];\nif (config.USE_VOLUME) {\n  tl.push(adjustVolume());\n}\nif (config.USE_EEG) {\n  tl.push(holdUpMarker());\n  tl.push(startCode());\n}\nif (config.USE_CAMERA) {\n  tl.push(camera());\n}\n\nconst preamble = {\n  type: \"html_keyboard_response\",\n  stimulus: \"\",\n  timeline: tl,\n};\n\nexport default preamble;\n","import experimentEnd from '../trials/experimentEnd'\nimport sendCode from '../trials/sendCode'\nimport prompt from '../trials/taskBlock'\nimport preamble from './preamble'\n\nexport const tl = [\n        preamble,\n        prompt('start'),\n        sendCode('start', 500),\n        prompt('stop'),\n        sendCode('stop', 500),\n        experimentEnd(5000)\n        ]\n\n","import React from \"react\";\nimport { Experiment } from \"jspsych-react\";\nimport { tl } from \"../timelines/main\";\n\nfunction JsPsychExperiment({ dataUpdateFunction, dataFinishFunction }) {\n\n  return (\n    <div className=\"App\">\n      <Experiment\n        settings={{\n          timeline: tl,\n          on_data_update: (data) => dataUpdateFunction(data),\n          on_finish: (data) => dataFinishFunction(data),\n        }}\n      />\n    </div>\n  );\n}\nexport default JsPsychExperiment;\n","import firebase from \"firebase\";\nimport 'firebase/firestore';\n\nrequire(\"dotenv\").config();\n\n// Set collection name\nconst collectionName = \"participant_responses\";\n\n// Firebase config\nlet config = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL: process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId || \"no-firebase\",\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n};\n\n\n// Get a Firestore instance\nvar db = firebase.initializeApp(config).firestore();\n\n// Use emulator if on localhost\nif (window.location.hostname === \"localhost\") {\n  db.useEmulator(\"localhost\", 8080);\n}\n\n// Add participant data and trial data to db\nconst initParticipant = (participantId, studyId, startDate) => {\n  // return promise with value true if participant and study id match, false otherwise\n    return db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .set({ start_time: startDate, app_version: window.navigator.appVersion, app_platform: window.navigator.platform, results: []})\n    .then(()=>{\n      return true\n    })\n    .catch((error) => {\n      return false\n    });\n};\n\n// Add inidividual trials to db\nconst addToFirebase = (data) => {\n  console.log(data)\n  const participantId = data.participant_id;\n  const studyId = data.study_id;\n  const startDate = data.start_date\n  \n  db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .update('results', firebase.firestore.FieldValue.arrayUnion(data))\n};\n\n// Export types that exists in Firestore\nexport {\n  db,\n  collectionName,\n  initParticipant,\n  addToFirebase\n};\n\nexport default firebase;","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nimport Login from \"./components/Login\";\nimport JsPsychExperiment from \"./components/JsPsychExperiment\";\n\nimport { jsPsych } from \"jspsych-react\";\nimport { getTurkUniqueId, getProlificId, sleep } from \"./lib/utils\";\nimport { initParticipant, addToFirebase } from \"./firebase\";\n\nimport { config } from \"./config/main\";\n\nfunction App() {\n  // Variables for time\n  const startDate = new Date().toISOString();\n  // Variables for login\n  const [loggedIn, setLogin] = useState(false);\n  const [ipcRenderer, setRenderer] = useState(false);\n  const [psiturk, setPsiturk] = useState(false);\n  const [envParticipantId, setEnvParticipantId] = useState(\"\");\n  const [envStudyId, setEnvStudyId] = useState(\"\");\n  const [currentMethod, setMethod] = useState(\"default\");\n  const [reject, setReject] = useState(false);\n\n  const query = new URLSearchParams(window.location.search);\n\n  // Validation functions for desktop case and firebase\n  const defaultValidation = async () => {\n    return true;\n  };\n  const firebaseValidation = (participantId, studyId) => {\n    return initParticipant(participantId, studyId, startDate);\n  };\n\n  // Adding data functions for firebase, electron adn Mturk\n  const defaultFunction = (data) => {};\n  const firebaseUpdateFunction = (data) => {\n    addToFirebase(data);\n  };\n  const desktopUpdateFunction = (data) => {\n    ipcRenderer.send(\"data\", data);\n  };\n  const psiturkUpdateFunction = (data) => {\n    psiturk.recordTrialData(data);\n  };\n\n  // On finish functions for electron, Mturk\n  const desktopFinishFunction = () => {\n    ipcRenderer.send(\"end\", \"true\");\n  };\n  const psiturkFinishFunction = () => {\n    const completePsiturk = async () => {\n      psiturk.saveData();\n      await sleep(5000);\n      psiturk.completeHIT();\n    };\n    completePsiturk();\n  };\n\n  // Function to add jspsych data on login\n  const setLoggedIn = useCallback(\n    (loggedIn, studyId, participantId) => {\n      if (loggedIn) {\n        jsPsych.data.addProperties({\n          participant_id: participantId,\n          study_id: studyId,\n          start_date: startDate,\n        });\n      }\n      setLogin(loggedIn);\n    },\n    [startDate]\n  );\n\n  // Login logic\n  useEffect(() => {\n    // For testing and debugging purposes\n    console.log(\"Turk:\", config.USE_MTURK);\n    console.log(\"Firebase:\", config.USE_FIREBASE);\n    console.log(\"Prolific:\", config.USE_PROLIFIC);\n    console.log(\"Electron:\", config.USE_ELECTRON);\n    console.log(\"Video:\", config.USE_CAMERA);\n    console.log(\"Volume:\", config.USE_VOLUME);\n    console.log(\"Event Marker:\", config.USE_EEG);\n    console.log(\"Photodiode:\", config.USE_PHOTODIODE);\n    // If on desktop\n    if (config.USE_ELECTRON) {\n      const { ipcRenderer } = window.require(\"electron\");\n      setRenderer(ipcRenderer);\n      ipcRenderer.send('updateEnvironmentVariables', config)\n      // If at home, fill in fields based on environment variables\n      const credentials = ipcRenderer.sendSync(\"syncCredentials\");\n      if (credentials.envParticipantId) {\n        setEnvParticipantId(credentials.envParticipantId);\n      }\n      if (credentials.envStudyId) {\n        setEnvStudyId(credentials.envStudyId);\n      }\n      setMethod(\"desktop\");\n    }\n    // If online\n    else {\n      // If MTURK\n      if (config.USE_MTURK) {\n        /* eslint-disable */\n        window.lodash = _.noConflict();\n        const turkId = getTurkUniqueId();\n        setPsiturk(new PsiTurk(turkId, \"/complete\"));\n        setMethod(\"mturk\");\n        setLoggedIn(true, \"mturk\", turkId);\n        /* eslint-enable */\n      }\n\n      // If prolific\n      else if (config.USE_PROLIFIC) {\n        const pID = getProlificId();\n        if (config.USE_FIREBASE && pID) {\n          setMethod(\"firebase\");\n          setLoggedIn(true, \"prolific\", pID);\n        } else {\n          setReject(true);\n        }\n      }\n\n      // If firebase\n      else if (config.USE_FIREBASE) {\n        setMethod(\"firebase\");\n        // Autologin with query parameters\n        const participantId = query.get(\"participantID\");\n        const studyId = query.get(\"studyID\");\n        if (participantId) {\n          setEnvParticipantId(participantId)\n        }\n        if (studyId) {\n          setEnvStudyId(studyId)\n        }\n      } else {\n        setReject(true);\n      }\n    }\n  // eslint-disable-next-line \n  }, []);\n\n  if (reject) {\n    return (\n      <div className=\"centered-h-v\">\n        <div className=\"width-50 alert alert-danger\">\n          Please ask your task provider to enable firebase.\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <>\n        {loggedIn ? (\n          <JsPsychExperiment\n            dataUpdateFunction={\n              {\n                desktop: desktopUpdateFunction,\n                firebase: firebaseUpdateFunction,\n                mturk: psiturkUpdateFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n            dataFinishFunction={\n              {\n                desktop: desktopFinishFunction,\n                mturk: psiturkFinishFunction,\n                firebase: defaultFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n          />\n        ) : (\n          <Login\n            validationFunction={\n              {\n                desktop: defaultValidation,\n                default: defaultValidation,\n                firebase: firebaseValidation,\n              }[currentMethod]\n            }\n            envParticipantId={envParticipantId}\n            envStudyId={envStudyId}\n            onLogin={setLoggedIn}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}